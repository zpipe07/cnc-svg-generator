package signs

import (
	"cnc-svg-generator/pkg/fonts"
	"cnc-svg-generator/pkg/svgutils"
	"fmt"
	"log"

	"github.com/tdewolff/canvas"
)

func drawCezar(
	width float64,
	height float64,
	foregroundColor string,
	backgroundColor string,
	lines []string,
) string {
	// Initialize SVG builder
	builder := svgutils.NewSVGBuilder(width, height)

	// Add the outer edge
	outerEdge, err := canvas.ParseSVGPath("m 22.355993,30.840222 h -0.09 c -0.08837,0 -0.16,0.07163 -0.16,0.16 v 0.09 0.58 c 0,0.04418 -0.03582,0.08 -0.08,0.08 h -20.64 c -0.044183,0 -0.08,-0.03582 -0.08,-0.08 v -0.58 -0.09 c 0,-0.08837 -0.071635,-0.16 -0.16,-0.16 h -0.09 c -0.469442,0 -0.85,-0.380558 -0.85,-0.85 v -3.115 -3.115 c 0,-0.469442 0.380558,-0.85 0.85,-0.85 h 0.09 c 0.088365,0 0.16,-0.07164 0.16,-0.16 v -0.09 -0.58 c 0,-0.04418 0.035817,-0.08 0.08,-0.08 h 20.64 c 0.04418,0 0.08,0.03582 0.08,0.08 v 0.58 0.09 c 0,0.08836 0.07163,0.16 0.16,0.16 h 0.09 c 0.469442,0 0.85,0.380558 0.85,0.85 v 3.115 3.115 c 0,0.469442 -0.380558,0.85 -0.85,0.85")
	if err != nil {
		log.Fatalf("Failed to parse SVG path: %s", err)
	}
	bounds := outerEdge.Bounds()
	outerEdge = outerEdge.Translate(-bounds.X0, -bounds.Y0)
	builder.StartGroup("Outside", map[string]string{})
	builder.AddPath(outerEdge.ToSVG(), map[string]string{
		"fill": foregroundColor,
		"id":   "outer-edge",
	})
	builder.EndGroup()

	// Add the border
	borderOuter, err := canvas.ParseSVGPath("m 1.555993,22.250222 v 0.41 0.09 c 0,0.226436 -0.183563,0.41 -0.41,0.41 h -0.09 c -0.331371,0 -0.6,0.268629 -0.6,0.6 v 3.115 3.115 c 0,0.33137 0.268629,0.6 0.6,0.6 h 0.09 c 0.226437,0 0.41,0.183563 0.41,0.41 v 0.09 0.41 h 20.3 v -0.41 -0.09 c 0,-0.226437 0.183563,-0.41 0.41,-0.41 h 0.09 c 0.331371,0 0.6,-0.26863 0.6,-0.6 v -3.115 -3.115 c 0,-0.331371 -0.268629,-0.6 -0.6,-0.6 h -0.09 c -0.226437,0 -0.41,-0.183564 -0.41,-0.41 v -0.09 -0.41 h -20.3")
	if err != nil {
		log.Fatalf("Failed to parse SVG path: %s", err)
	}
	borderOuter = borderOuter.Translate(-bounds.X0, -bounds.Y0)
	builder.StartGroup("Vcarve", map[string]string{})
	builder.AddPath(borderOuter.ToSVG(), map[string]string{
		"fill": backgroundColor,
		"id":   "my-custom-id",
	})
	borderInner, err := canvas.ParseSVGPath("m 21.735993,31.380222 v -0.29 -0.09 c 0,-0.292711 0.237289,-0.53 0.53,-0.53 h 0.09 c 0.265096,0 0.48,-0.214904 0.48,-0.48 v -3.115 -3.115 c 0,-0.265097 -0.214904,-0.48 -0.48,-0.48 h -0.09 c -0.292711,0 -0.53,-0.23729 -0.53,-0.53 v -0.09 -0.29 h -20.06 v 0.29 0.09 c 0,0.29271 -0.237289,0.53 -0.53,0.53 h -0.09 c -0.265097,0 -0.48,0.214903 -0.48,0.48 v 3.115 3.115 c 0,0.265096 0.214903,0.48 0.48,0.48 h 0.09 c 0.292711,0 0.53,0.237289 0.53,0.53 v 0.09 0.29 h 20.06")
	if err != nil {
		log.Fatalf("Failed to parse SVG path: %s", err)
	}
	borderInner = borderInner.Translate(-bounds.X0, -bounds.Y0)
	builder.AddPath(borderInner.ToSVG(), map[string]string{
		"fill": foregroundColor,
		"id":   "my-custom-id",
	})

	// create decorative elements
	paths := []string{
		"m 5.847993,26.352174 2.24,0.007 c 0.017109,-0.005 0.032482,-0.014 0.045,-0.026 0.026,-0.023 0.052,-0.057 0.052,-0.089 -3.8e-5,-0.01621 -0.00696,-0.0308 -0.018,-0.041 -0.029622,-0.02418 -0.067456,-0.03868 -0.108678,-0.03868 -0.00516,0 -0.010275,2.28e-4 -0.015322,6.84e-4 -0.038,0 -0.077,0.004 -0.112,0.004 -0.030222,6e-6 -0.060445,9e-6 -0.090668,9e-6 -0.32155,0 -0.643022,-3.3e-4 -0.964332,-0.001 -0.624,-0.002 -0.959,-0.003 -1.006,0.001 -0.024,0.003 -0.171,0.029 -0.171,0.002 0.00294,-0.01001 0.00989,-0.01829 0.019,-0.023 0.030022,-0.01706 0.063448,-0.0288 0.099,-0.034 0.056,-0.012 0.113,-0.021 0.113,-0.039 -0.00241,-0.0084 -0.0088,-0.01513 -0.017,-0.018 -0.037169,-0.01623 -0.07822,-0.02519 -0.121363,-0.02519 -0.00356,0 -0.00711,6.1e-5 -0.010637,1.86e-4 -0.117274,-3.83e-4 -0.213354,-0.01679 -0.314485,-0.06091 -0.01,-0.005 -0.029097,-0.02397 6.57e-4,-0.03568 l 0.364828,-0.198418 c 0.058,-0.015 0.144,0.045 0.198,0.045 9.5e-4,6.9e-5 0.00191,1.03e-4 0.00288,1.03e-4 0.016825,0 0.031224,-0.01039 0.037123,-0.0251 0.00238,-0.0049 0.00379,-0.01028 0.004,-0.016 0,-0.059 -0.174,-0.06 -0.208,-0.129 -0.025802,-0.05589 -0.047565,-0.114026 -0.065,-0.174 -0.033,-0.102 -0.065,-0.203 -0.134,-0.282 -0.187,-0.213 -0.397,-0.327 -0.658,-0.44 -0.021637,-0.0088 -0.044001,-0.01622 -0.067,-0.022 -0.136973,-0.03438 -0.279527,-0.05447 -0.426,-0.059 -1.67e-4,-2e-6 -3.33e-4,-3e-6 -5e-4,-3e-6 -1.67e-4,0 -3.34e-4,1e-6 -5e-4,3e-6 -0.079,0 -0.012,0.183 0.103,0.366 0.038752,0.06159 0.081569,0.120359 0.128,0.176 0.068301,0.08151 0.145447,0.155348 0.23,0.22 0.189004,0.134055 0.40225,0.236154 0.632,0.298 0.01085,0.0054 0.018302,0.0166 0.018302,0.02955 0,0.0015 -1.02e-4,0.003 -3.02e-4,0.0045 0,0.027 -0.059295,0.07824 -0.078295,0.08824 -0.103,0.055 -0.188705,0.10176 -0.297705,0.05976 -0.127998,-0.04741 -0.250627,-0.10593 -0.367,-0.174 -0.132032,-0.07459 -0.251868,-0.168219 -0.356,-0.277 -0.265,-0.291 -0.398,-0.442 -0.412,-0.457 -0.065,-0.066 -0.124,-0.188 -0.213,-0.188 -3.11e-4,-3e-6 -6.22e-4,-5e-6 -9.34e-4,-5e-6 -0.00478,0 -0.00947,3.39e-4 -0.014066,10e-4 -0.008,0.001 -0.025,0.049 -0.025,0.128 0.00313,0.135441 0.043363,0.261712 0.111,0.369 0.105,0.176 0.286,0.304 0.469,0.396 0.667,0.333 1.081,0.406 1.09,0.444 0.013,0.059 -0.154,0.02 -0.301,-0.02 -0.052696,-0.01446 -0.105674,-0.02824 -0.159,-0.041 -0.094233,-0.02541 -0.187532,-0.05327 -0.28,-0.083 -0.162,-0.047 -0.365,-0.095 -0.605,-0.095 -0.123232,1.63e-4 -0.24363,0.01242 -0.36,0.036 -0.053182,0.01364 -0.10556,0.02929 -0.157,0.047 -0.135,0.04 -0.324448,0.0968 -0.539,0.014 -0.102299,-0.03948 -0.117,-0.173 -0.126,-0.303 -0.00224,-0.04093 -0.00656,-0.08131 -0.013,-0.121 -0.00364,-0.02046 -0.00761,-0.0408 -0.012,-0.061 -0.0081,-0.06371 -0.038007,-0.120616 -0.082,-0.163 -0.142809,-0.128655 -0.308757,-0.23212 -0.491,-0.303 -4.86e-4,-9.4e-5 -9.87e-4,-1.42e-4 -0.0015,-1.42e-4 -5.13e-4,0 -0.00101,4.8e-5 -0.0015,1.42e-4 -0.072,0.026 -0.087,0.199 -0.023,0.371 0.034809,0.09708 0.09351,0.182761 0.169,0.25 0.068,0.058 0.228,0.105 0.388,0.246 0.02858,0.02537 0.055631,0.05242 0.081,0.081 0.094,0.104 0.185,0.112 0.187,0.119 5.74e-4,0.0016 9.19e-4,0.0033 0.001,0.005 0,0.031 -0.085,0.068 -0.17,0.066 -8.33e-4,7e-6 -0.00167,1.1e-5 -0.0025,1.1e-5 -8.34e-4,0 -0.00167,-4e-6 -0.0025,-1.1e-5 -0.019,0 -0.151,-0.151 -0.462,-0.34 -0.049525,-0.02947 -0.100175,-0.05725 -0.152,-0.083 -0.126,-0.063 -0.284,-0.127 -0.284,-0.044 0.00104,0.01961 0.00594,0.0382 0.014,0.055 0.078,0.177 0.312,0.229 0.453,0.36 0.078,0.072 -0.18,0.006 -0.22,0.002 -0.082897,-0.0084 -0.166965,-0.01278 -0.252,-0.013 -0.032441,-0.003 -0.065307,-0.0045 -0.098527,-0.0045 -0.215675,0 -0.416461,0.06375 -0.584473,0.173542 -0.0091,0.0075 -0.015154,0.01852 -0.016,0.031 0,0.043 0.094,0.079 0.187,0.105 0.046066,0.01288 0.092737,0.02429 0.14,0.034 0.159331,0.03424 0.32467,0.052 0.494158,0.052 2.81e-4,0 5.61e-4,0 8.42e-4,0 0.049,0 0.086,-0.001 0.111,-0.001 0.00365,-7.44e-4 0.00742,-0.0011 0.011287,-0.0011 0.00925,0 0.017992,0.0022 0.025713,0.0061 0.00195,0.0046 0.00302,0.0096 0.00302,0.01484 0,3.88e-4 -5e-6,7.75e-4 -1.7e-5,0.0012 0,0.045 -0.078,0.098 -0.156,0.179 -0.037231,0.0374 -0.069895,0.07935 -0.097,0.125 -0.027,0.048 -0.038,0.068 0.029,0.068 0.185573,-0.04727 0.356584,-0.130968 0.505,-0.243 0.057438,-0.04084 0.113446,-0.08357 0.168,-0.128 0.152,-0.121 0.322,-0.242 0.394,-0.115 0.00232,0.0035 0.00376,0.0076 0.004,0.012 0,0.021 -0.02372,0.01993 -0.06372,0.02893 -0.022036,0.0038 -0.060438,0.02026 -0.08028,0.02907 -0.057816,0.03627 -0.082,0.095 -0.156,0.167 -0.035218,0.03477 -0.07485,0.06509 -0.118,0.09 -0.125,0.071 -0.502,0.238 -0.502,0.606 5.9e-5,0.01007 3.89e-4,0.02007 10e-4,0.03 0.002,0.051 -0.011,0.148 0.039,0.148 0.028675,-0.0047 0.054332,-0.01835 0.074,-0.038 0.2177,-0.128512 0.406946,-0.300069 0.556,-0.503 2e-6,-3.33e-4 3e-6,-6.67e-4 3e-6,-0.001 0,-3.34e-4 -10e-7,-6.67e-4 -3e-6,-0.001 0.011473,-0.05017 0.018579,-0.101976 0.021,-0.155 0.008,-0.12 0.031383,-0.225559 0.122128,-0.276324 0.0712,-0.03983 0.165308,-0.06153 0.232872,-0.06368 0.100949,-0.0032 0.192,0.026 0.266,0.052 0.043975,0.01714 0.088633,0.03291 0.134,0.047 0.129118,0.03343 0.264529,0.051 0.404044,0.051 3.19e-4,0 6.37e-4,0 9.56e-4,0 0.555,0 0.965,-0.28 1.208,-0.272 0.006,0 0.265501,0.02723 0.162501,0.08123 -0.044802,0.0086 -0.104704,0.01647 -0.144058,0.02185 -0.093327,0.01197 -0.146025,0.02462 -0.230443,0.05292 -0.575,0.206 -0.972,0.405 -1.123,0.581 -0.014657,0.01711 -0.028683,0.03478 -0.042,0.053 -0.199,0.27 -0.159,0.541 -0.141,0.545 0.158545,-0.138046 0.308204,-0.286035 0.448,-0.443 0.527,-0.54 0.959,-0.651 0.999,-0.651 0.015295,2.42e-4 0.030932,-8.31e-4 0.045,0.004 0.076213,0.02617 0.178585,0.06497 0.236,0.137 0.04983,0.08175 -0.191,0.132 -0.297,0.178 -0.365,0.157 -0.704,0.486 -0.818,0.867 -0.0046,0.01393 -0.00735,0.02869 -0.008,0.044 0,0.028 0.019,0.023 0.037,0.023 0.00237,2.02e-4 0.00471,5.38e-4 0.007,0.001 0.00632,6.72e-4 0.01274,10e-4 0.019237,10e-4 5.89e-4,0 0.00118,-2e-6 0.00176,-8e-6 0.116519,-0.01246 0.229607,-0.03639 0.338,-0.071 0.165211,-0.04159 0.320866,-0.107219 0.463,-0.193 0.245639,-0.14412 0.43144,-0.37917 0.511,-0.659 0.001,-0.006 0.006,-0.116 0.108,-0.119 0.02301,-0.0076 0.04538,-0.01665 0.067,-0.027 0.033,-0.016 0.067,-0.035 0.067,-0.05 -0.00323,-0.0088 -0.011675,-0.01504 -0.02158,-0.01504 -4.77e-4,0 -9.51e-4,1.4e-5 -0.00142,4.4e-5 -0.00451,-7.27e-4 -0.00914,-0.0011 -0.013856,-0.0011 -0.00139,0 -0.00277,3.2e-5 -0.00414,9.8e-5 -0.038,0 -0.098,0.014 -0.169,0.014 -0.00242,4.6e-5 -0.00485,6.8e-5 -0.00728,6.8e-5 -0.061671,0 -0.119981,-0.01439 -0.171719,-0.04007 -0.04118,-0.02045 -0.081813,-0.04187 -0.122,-0.064 -0.076,-0.042 -0.157211,-0.06843 -0.157211,-0.09143 0.00236,-0.0084 0.055442,-0.02131 0.086628,-0.02588 0.14939,-0.02191 0.363583,-0.02769 0.363583,-0.06269 -0.00856,-0.01594 -0.02436,-0.0274 -0.043,-0.03 -0.020129,-0.0019 -0.040131,-0.0042 -0.06,-0.007 -0.029,-0.005 -0.059,-0.012 -0.059,-0.024 0.0019,-0.007 0.00719,-0.01264 0.014,-0.015 0.016203,-0.0084 0.034612,-0.01315 0.054126,-0.01315 0.00197,0 0.00393,4.8e-5 0.00587,1.46e-4 0.016,0 0.033,0.002 0.05,0.002 0.00302,-2.74e-4 0.00602,-6.04e-4 0.009,-0.001",
		"m 17.563993,26.352174 -2.24,0.007 c -0.01711,-0.005 -0.03248,-0.014 -0.045,-0.026 -0.026,-0.023 -0.052,-0.057 -0.052,-0.089 3.8e-5,-0.01621 0.007,-0.0308 0.018,-0.041 0.02962,-0.02418 0.06746,-0.03868 0.108677,-0.03868 0.0052,0 0.01028,2.28e-4 0.01532,6.84e-4 0.038,0 0.077,0.004 0.112,0.004 0.03022,6e-6 0.06044,9e-6 0.09067,9e-6 0.321549,0 0.643022,-3.3e-4 0.964332,-0.001 0.624,-0.002 0.959,-0.003 1.006,0.001 0.024,0.003 0.171,0.029 0.171,0.002 -0.0029,-0.01001 -0.0099,-0.01829 -0.019,-0.023 -0.03002,-0.01706 -0.06345,-0.0288 -0.099,-0.034 -0.056,-0.012 -0.113,-0.021 -0.113,-0.039 0.0024,-0.0084 0.0088,-0.01513 0.017,-0.018 0.03717,-0.01623 0.07822,-0.02519 0.121362,-0.02519 0.0036,0 0.0071,6.1e-5 0.01064,1.86e-4 0.117274,-3.83e-4 0.213353,-0.01679 0.314485,-0.06091 0.01,-0.005 0.0291,-0.02397 -6.58e-4,-0.03568 l -0.364827,-0.198418 c -0.058,-0.015 -0.144,0.045 -0.198,0.045 -9.5e-4,6.9e-5 -0.0019,1.03e-4 -0.0029,1.03e-4 -0.01683,0 -0.03122,-0.01039 -0.03712,-0.0251 -0.0024,-0.0049 -0.0038,-0.01028 -0.004,-0.016 0,-0.059 0.174,-0.06 0.208,-0.129 0.0258,-0.05589 0.04756,-0.114026 0.065,-0.174 0.033,-0.102 0.065,-0.203 0.134,-0.282 0.187,-0.213 0.397,-0.327 0.658,-0.44 0.02164,-0.0088 0.044,-0.01622 0.067,-0.022 0.136973,-0.03438 0.279527,-0.05447 0.426,-0.059 1.66e-4,-2e-6 3.33e-4,-3e-6 5e-4,-3e-6 1.67e-4,0 3.33e-4,1e-6 5e-4,3e-6 0.079,0 0.012,0.183 -0.103,0.366 -0.03875,0.06159 -0.08157,0.120359 -0.128,0.176 -0.0683,0.08151 -0.145448,0.155348 -0.23,0.22 -0.189005,0.134055 -0.402251,0.236154 -0.632,0.298 -0.01085,0.0054 -0.0183,0.0166 -0.0183,0.02955 0,0.0015 1.01e-4,0.003 3.02e-4,0.0045 0,0.027 0.05929,0.07824 0.07829,0.08824 0.103,0.055 0.188705,0.10176 0.297705,0.05976 0.127998,-0.04741 0.250626,-0.10593 0.367,-0.174 0.132031,-0.07459 0.251867,-0.168219 0.356,-0.277 0.265,-0.291 0.398,-0.442 0.412,-0.457 0.065,-0.066 0.124,-0.188 0.213,-0.188 3.11e-4,-3e-6 6.22e-4,-5e-6 9.33e-4,-5e-6 0.0048,0 0.0095,3.39e-4 0.01407,10e-4 0.008,0.001 0.025,0.049 0.025,0.128 -0.0031,0.135441 -0.04336,0.261712 -0.111,0.369 -0.105,0.176 -0.286,0.304 -0.469,0.396 -0.667,0.333 -1.081,0.406 -1.09,0.444 -0.013,0.059 0.154,0.02 0.301,-0.02 0.05269,-0.01446 0.105674,-0.02824 0.159,-0.041 0.09423,-0.02541 0.187531,-0.05327 0.28,-0.083 0.162,-0.047 0.365,-0.095 0.605,-0.095 0.123232,1.63e-4 0.243629,0.01242 0.36,0.036 0.05318,0.01364 0.10556,0.02929 0.157,0.047 0.135,0.04 0.324447,0.0968 0.539,0.014 0.102298,-0.03948 0.117,-0.173 0.126,-0.303 0.0022,-0.04093 0.0066,-0.08131 0.013,-0.121 0.0036,-0.02046 0.0076,-0.0408 0.012,-0.061 0.0081,-0.06371 0.03801,-0.120616 0.082,-0.163 0.142809,-0.128655 0.308756,-0.23212 0.491,-0.303 4.85e-4,-9.4e-5 9.87e-4,-1.42e-4 0.0015,-1.42e-4 5.13e-4,0 10e-4,4.8e-5 0.0015,1.42e-4 0.072,0.026 0.087,0.199 0.023,0.371 -0.03481,0.09708 -0.09351,0.182761 -0.169,0.25 -0.068,0.058 -0.228,0.105 -0.388,0.246 -0.02858,0.02537 -0.05563,0.05242 -0.081,0.081 -0.094,0.104 -0.185,0.112 -0.187,0.119 -5.75e-4,0.0016 -9.2e-4,0.0033 -0.001,0.005 0,0.031 0.085,0.068 0.17,0.066 8.32e-4,7e-6 0.0017,1.1e-5 0.0025,1.1e-5 8.34e-4,0 0.0017,-4e-6 0.0025,-1.1e-5 0.019,0 0.151,-0.151 0.462,-0.34 0.04953,-0.02947 0.100175,-0.05725 0.152,-0.083 0.126,-0.063 0.284,-0.127 0.284,-0.044 -0.001,0.01961 -0.0059,0.0382 -0.014,0.055 -0.078,0.177 -0.312,0.229 -0.453,0.36 -0.078,0.072 0.18,0.006 0.22,0.002 0.0829,-0.0084 0.166965,-0.01278 0.252,-0.013 0.03244,-0.003 0.06531,-0.0045 0.09853,-0.0045 0.215676,0 0.416462,0.06375 0.584474,0.173542 0.0091,0.0075 0.01515,0.01852 0.016,0.031 0,0.043 -0.094,0.079 -0.187,0.105 -0.04607,0.01288 -0.09274,0.02429 -0.14,0.034 -0.159331,0.03424 -0.324671,0.052 -0.494159,0.052 -2.8e-4,0 -5.61e-4,0 -8.41e-4,0 -0.049,0 -0.086,-0.001 -0.111,-0.001 -0.0036,-7.44e-4 -0.0074,-0.0011 -0.01129,-0.0011 -0.0093,0 -0.01799,0.0022 -0.02571,0.0061 -0.0019,0.0046 -0.003,0.0096 -0.003,0.01484 0,3.88e-4 6e-6,7.75e-4 1.8e-5,0.0012 0,0.045 0.078,0.098 0.156,0.179 0.03723,0.0374 0.0699,0.07935 0.097,0.125 0.027,0.048 0.038,0.068 -0.029,0.068 -0.185574,-0.04727 -0.356584,-0.130968 -0.505,-0.243 -0.05744,-0.04084 -0.113446,-0.08357 -0.168,-0.128 -0.152,-0.121 -0.322,-0.242 -0.394,-0.115 -0.0023,0.0035 -0.0038,0.0076 -0.004,0.012 0,0.021 0.02372,0.01993 0.06372,0.02893 0.02204,0.0038 0.06044,0.02026 0.08028,0.02907 0.05781,0.03627 0.082,0.095 0.156,0.167 0.03522,0.03477 0.07485,0.06509 0.118,0.09 0.125,0.071 0.502,0.238 0.502,0.606 -6e-5,0.01007 -3.9e-4,0.02007 -0.001,0.03 -0.002,0.051 0.011,0.148 -0.039,0.148 -0.02867,-0.0047 -0.05433,-0.01835 -0.074,-0.038 -0.217701,-0.128512 -0.406947,-0.300069 -0.556,-0.503 -2e-6,-3.33e-4 -3e-6,-6.67e-4 -3e-6,-0.001 0,-3.34e-4 1e-6,-6.67e-4 3e-6,-0.001 -0.01147,-0.05017 -0.01858,-0.101976 -0.021,-0.155 -0.008,-0.12 -0.03138,-0.225559 -0.122128,-0.276324 -0.0712,-0.03983 -0.165308,-0.06153 -0.232872,-0.06368 -0.100949,-0.0032 -0.192,0.026 -0.266,0.052 -0.04398,0.01714 -0.08863,0.03291 -0.134,0.047 -0.129118,0.03343 -0.264529,0.051 -0.404045,0.051 -3.18e-4,0 -6.37e-4,0 -9.55e-4,0 -0.555,0 -0.965,-0.28 -1.208,-0.272 -0.006,0 -0.265502,0.02723 -0.162502,0.08123 0.0448,0.0086 0.104705,0.01647 0.144058,0.02185 0.09333,0.01197 0.146026,0.02462 0.230444,0.05292 0.575,0.206 0.972,0.405 1.123,0.581 0.01466,0.01711 0.02868,0.03478 0.042,0.053 0.199,0.27 0.159,0.541 0.141,0.545 -0.158545,-0.138046 -0.308204,-0.286035 -0.448,-0.443 -0.527,-0.54 -0.959,-0.651 -0.999,-0.651 -0.0153,2.42e-4 -0.03093,-8.31e-4 -0.045,0.004 -0.07621,0.02617 -0.178585,0.06497 -0.236,0.137 -0.04983,0.08175 0.191,0.132 0.297,0.178 0.365,0.157 0.704,0.486 0.818,0.867 0.0046,0.01393 0.0074,0.02869 0.008,0.044 0,0.028 -0.019,0.023 -0.037,0.023 -0.0024,2.02e-4 -0.0047,5.38e-4 -0.007,0.001 -0.0063,6.72e-4 -0.01274,10e-4 -0.01924,10e-4 -5.88e-4,0 -0.0012,-2e-6 -0.0018,-8e-6 -0.11652,-0.01246 -0.229607,-0.03639 -0.338,-0.071 -0.165212,-0.04159 -0.320867,-0.107219 -0.463,-0.193 -0.245639,-0.14412 -0.43144,-0.37917 -0.511,-0.659 -10e-4,-0.006 -0.006,-0.116 -0.108,-0.119 -0.02301,-0.0076 -0.04538,-0.01665 -0.067,-0.027 -0.033,-0.016 -0.067,-0.035 -0.067,-0.05 0.0032,-0.0088 0.01168,-0.01504 0.02158,-0.01504 4.77e-4,0 9.5e-4,1.4e-5 0.0014,4.4e-5 0.0045,-7.27e-4 0.0091,-0.0011 0.01385,-0.0011 0.0014,0 0.0028,3.2e-5 0.0041,9.8e-5 0.038,0 0.098,0.014 0.169,0.014 0.0024,4.6e-5 0.0048,6.8e-5 0.0073,6.8e-5 0.06167,0 0.119982,-0.01439 0.17172,-0.04007 0.04118,-0.02045 0.08181,-0.04187 0.122,-0.064 0.076,-0.042 0.157211,-0.06843 0.157211,-0.09143 -0.0024,-0.0084 -0.05544,-0.02131 -0.08663,-0.02588 -0.14939,-0.02191 -0.363583,-0.02769 -0.363583,-0.06269 0.0086,-0.01594 0.02436,-0.0274 0.043,-0.03 0.02013,-0.0019 0.04013,-0.0042 0.06,-0.007 0.029,-0.005 0.059,-0.012 0.059,-0.024 -0.0019,-0.007 -0.0072,-0.01264 -0.014,-0.015 -0.0162,-0.0084 -0.03461,-0.01315 -0.05413,-0.01315 -0.002,0 -0.0039,4.8e-5 -0.0059,1.46e-4 -0.016,0 -0.033,0.002 -0.05,0.002 -0.003,-2.74e-4 -0.006,-6.04e-4 -0.009,-0.001",
	}
	for _, pathStr := range paths {
		path, err := canvas.ParseSVGPath(pathStr)
		if err != nil {
			log.Fatalf("Failed to parse SVG path: %s", err)
		}
		path = path.Translate(-bounds.X0, -bounds.Y0)
		builder.AddPath(path.ToSVG(), map[string]string{
			"fill": backgroundColor,
			"id":   "outer-edge",
		})
	}

	// draw text
	var fontFamily *canvas.FontFamily

	for i, line := range lines {
		// draw text container
		var container *canvas.Path
		var containerX, containerY float64
		var containerBounds canvas.Rect
		if i == 0 {
			container = canvas.Rectangle(width-17, 4.5)
			containerBounds = container.Bounds()
			containerX = width/2 - containerBounds.W()/2
			containerY = height/2 - 0.75
		} else if i == 1 {
			container = canvas.Rectangle(width-3.5, 2.5)
			containerBounds = container.Bounds()
			containerX = width/2 - containerBounds.W()/2
			containerY = 1.0
		}
		// *************************************************************
		// ********** uncomment to draw text container border **********
		// *************************************************************
		container = container.Translate(containerX, containerY)
		container = container.Scale(1, -1)
		container = container.Translate(0, height)
		builder.AddPath(container.ToSVG(), map[string]string{
			"fill":         "none",
			"stroke":       "pink",
			"stroke-width": "0.025",
			"id":           fmt.Sprintf("text-container-%d", i),
		})

		// draw text
		fontSize := 1.0
		if i == 0 {
			fontFamily = canvas.NewFontFamily("Playball")
			if err := fontFamily.LoadFont(fonts.PlayballFont, 0, canvas.FontRegular); err != nil {
				log.Println("Failed to load Playball font: ", err)
				panic("Font loading error")
			}
		} else {
			fontFamily = canvas.NewFontFamily("Arbutus")
			if err := fontFamily.LoadFont(fonts.ArbutusFont, 0, canvas.FontRegular); err != nil {
				log.Println("Failed to load Arbutus font: ", err)
				panic("Font loading error")
			}
		}
		face := fontFamily.Face(fontSize, canvas.FontRegular, canvas.FontNormal)
		textPath, _, err := face.ToPath(line)
		if err != nil {
			log.Fatalf("Failed to create text path: %s", err)
		}
		textBounds := textPath.Bounds()

		// Calculate the scale factor to fit the path within the container
		scale := min(containerBounds.W()/textBounds.W(), containerBounds.H()/textBounds.H())
		textPath.Scale(scale, scale)

		// recalculate the bounds after scaling
		textBounds = textPath.Bounds()
		textMetrics := face.Metrics()
		ascent := textMetrics.Ascent
		descent := textMetrics.Descent
		x := containerX + containerBounds.W()/2 - textBounds.W()/2
		y := containerY + containerBounds.H()/2 + descent*scale - ((ascent+descent)/2)*scale
		textPath = textPath.Translate(x, y)
		textPath = textPath.Scale(1, -1)
		textPath = textPath.Translate(0, height)
		builder.AddPath(textPath.ToSVG(), map[string]string{
			"fill": backgroundColor,
			"id":   fmt.Sprintf("text-%d", i),
		})
	}

	builder.EndGroup()

	return builder.Close()
}
